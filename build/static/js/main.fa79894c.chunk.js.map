{"version":3,"sources":["reportWebVitals.js","Store/GraphQL_Request_Store.js","components/Header.js","util/graphql.js","components/GraphQL_DeleteButton.js","components/GraphQL_Post.js","components/GraphQL_PostForm.js","components/GraphQL_RequestAccordion.js","components/GraphQL_Page.js","http-common.js","services/httpRest.service.js","Store/REST_Request_Store.js","components/REST_DeleteButton.js","components/REST_Post.js","components/REST_PostForm.js","components/REST_RequestAccordion.js","components/REST_Page.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","requests","Context","createContext","GraphQLRequeststore","children","useReducer","state","action","type","payload","Error","dispatch","Provider","value","Header","props","history","classes","makeStyles","root","flexGrow","useStyles","React","useState","setValue","Paper","className","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","component","Link","to","FETCH_POSTS_QUERY","gql","DELETE_POST_MUTATION","GraphQLDeleteButton","postId","DeleteButton","padding","textAlign","useContext","deletePostResult","setDeletePostResult","useMutation","variables","update","proxy","result","newData","readQuery","query","getPosts","filter","p","id","JSON","stringify","writeQuery","data","deletePost","useEffect","Request","RequestMethod","RequestURL","RequestBody","loc","source","body","RequestSize","length","Response","IconButton","variant","color","onClick","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","UPDATE_POST_MUTATION","GraphQLPost","post","createdAt","editMode","setEditMode","postBody","setPostBody","updatePostResult","setUpdatePostResult","updatePost","Card","CardHeader","avatar","Avatar","subheader","moment","fromNow","CardContent","Grow","in","style","transformOrigin","timeout","onSubmit","e","preventDefault","handleSave","FormControl","fullWidth","TextField","rows","name","required","target","CardActions","Button","Typography","disabled","CREATE_POST_MUTATION","GraphQLPostForm","inputFocused","setInputFocus","createPostResult","setCreatePostResult","createPost","handleSubmit","multiline","autoFocus","GraphQLRequestAccordion","posts","map","request","Accordion","AccordionSummary","expandIcon","AccordionDetails","Grid","container","spacing","item","xs","elevation","href","toFixed","RequestExecutionTime","GraphQL","start","performance","now","useQuery","time","console","log","initiallyLoaded","setInitiallyLoaded","Container","maxWidth","CircularProgress","axios","create","baseURL","headers","http","get","put","delete","RESTRequeststore","parentCallback","httpRestService","res","catch","RESTPost","restpost","_id","RESTPostForm","RESTRequestAccordion","REST","restposts","setPosts","retrievePosts","getAll","deleteCallbackFunction","RESTPostNew","App","exact","path","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.fa79894c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  requests: [],\r\n};\r\n\r\nconst GraphQLRequeststore = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"ADD_GRAPHQL_REQUEST\":\r\n        const newState = {\r\n          ...state,\r\n          requests: [...state.requests, action.payload],\r\n        };\r\n        return newState;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }, initialState);\r\n\r\n  return (\r\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\r\n  );\r\n};\r\n\r\nexport const Context = createContext(initialState);\r\n\r\nexport default GraphQLRequeststore;\r\n","import React from \"react\";\r\nimport { makeStyles, Paper, Tabs, Tab } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header(props, history) {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    // this.props.history.push(value);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Tabs\r\n        value={value}\r\n        onChange={handleChange}\r\n        indicatorColor='primary'\r\n        textColor='primary'\r\n        centered\r\n      >\r\n        <Tab label='REST' component={Link} to='/rest' />\r\n        <Tab label='GraphQL' component={Link} to='/graphql' />\r\n      </Tabs>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      body\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\nexport default FETCH_POSTS_QUERY;\r\n\r\n// export const CREATE_POST_MUTATION = gql`\r\n//   mutation createPost($body: String!) {\r\n//     createPost(body: $body) {\r\n//       id\r\n//       body\r\n//       createdAt\r\n//       username\r\n//     }\r\n//   }\r\n// `;\r\n// export default CREATE_POST_MUTATION;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { IconButton, makeStyles } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport FETCH_POSTS_QUERY from \"../util/graphql\";\r\nimport { Context } from \"../Store/GraphQL_Request_Store\";\r\n\r\nfunction GraphQLDeleteButton({ postId }) {\r\n  const useStyles = makeStyles({\r\n    DeleteButton: {\r\n      padding: \"0 0 auto 0\",\r\n      textAlign: \"right\",\r\n    },\r\n  });\r\n\r\n  const [, dispatch] = useContext(Context);\r\n  const [deletePostResult, setDeletePostResult] = useState();\r\n\r\n  const [deletePost] = useMutation(DELETE_POST_MUTATION, {\r\n    variables: { postId: postId },\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n      });\r\n      let newData = data;\r\n      newData = [...newData.getPosts.filter((p) => p.id !== postId)];\r\n      setDeletePostResult(() => JSON.stringify(result, null, 2));\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: { getPosts: newData },\r\n      });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (deletePostResult) {\r\n      dispatch({\r\n        type: \"ADD_GRAPHQL_REQUEST\",\r\n        payload: {\r\n          Request: \"Delete Post\",\r\n          RequestMethod: \"POST\",\r\n          RequestURL: \"http://localhost:5000/\",\r\n          RequestBody: DELETE_POST_MUTATION.loc.source.body,\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(deletePostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: deletePostResult,\r\n        },\r\n      });\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [deletePostResult]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton\r\n      variant='outlined'\r\n      color='secondary'\r\n      aria-label='delete post'\r\n      className={classes.DeleteButton}\r\n      onClick={deletePost}\r\n    >\r\n      <DeleteIcon />\r\n    </IconButton>\r\n  );\r\n}\r\nconst DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nexport default GraphQLDeleteButton;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardActions,\r\n  Avatar,\r\n  Typography,\r\n  CardContent,\r\n  IconButton,\r\n  FormControl,\r\n  Button,\r\n  TextField,\r\n  Grow,\r\n} from \"@material-ui/core\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport moment from \"moment\";\r\n\r\nimport GraphQLDeleteButton from \"./GraphQL_DeleteButton\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport FETCH_POSTS_QUERY from \"../util/graphql\";\r\nimport { Context } from \"../Store/GraphQL_Request_Store\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction GraphQLPost({ post: { id, body, createdAt } }) {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [postBody, setPostBody] = useState(body);\r\n\r\n  const [, dispatch] = useContext(Context);\r\n  const [updatePostResult, setUpdatePostResult] = useState();\r\n\r\n  const [updatePost,] = useMutation(UPDATE_POST_MUTATION, {\r\n    variables: { postId: id, body: postBody },\r\n    update(proxy, result) {\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n          getPosts: {\r\n            id: id,\r\n            body: postBody,\r\n          },\r\n        },\r\n        variables: {\r\n          id: id,\r\n        },\r\n      });\r\n      setUpdatePostResult(() => JSON.stringify(result, null, 2));\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (updatePostResult) {\r\n      dispatch({\r\n        type: \"ADD_GRAPHQL_REQUEST\",\r\n        payload: {\r\n          Request: \"Update Post\",\r\n          RequestMethod: \"POST\",\r\n          RequestURL: \"http://localhost:5000/\",\r\n          RequestBody: UPDATE_POST_MUTATION.loc.source.body,\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(updatePostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: updatePostResult,\r\n        },\r\n      });\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [updatePostResult]);\r\n\r\n  const handleSave = (e) => {\r\n    e.preventDefault();\r\n    updatePost();\r\n    setEditMode(false);\r\n  };\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label='recipe' className={classes.avatar}>\r\n            S\r\n          </Avatar>\r\n        }\r\n        title='User Name'\r\n        subheader={moment(createdAt).fromNow()}\r\n      />\r\n      <CardContent>\r\n        {editMode ? (\r\n          <Grow in={true} style={{ transformOrigin: \"0 0 0\" }} timeout={800}>\r\n            <form\r\n              onSubmit={(e) => {\r\n                handleSave(e);\r\n              }}\r\n            >\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id='standard-basic'\r\n                  label='Edit Post'\r\n                  rows={4}\r\n                  fullWidth\r\n                  variant='outlined'\r\n                  name='postBody'\r\n                  required\r\n                  value={postBody}\r\n                  // autoFocus={inputFocused}\r\n                  onChange={(e) => setPostBody(e.target.value)}\r\n                />\r\n                <CardActions>\r\n                  <Button\r\n                    type='submit'\r\n                    value='SubmitPost'\r\n                    variant='contained'\r\n                    color='secondary'\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                </CardActions>\r\n              </FormControl>\r\n            </form>\r\n          </Grow>\r\n        ) : (\r\n          <Typography variant='body2' component='p'>\r\n            {postBody}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n      <CardActions>\r\n        {editMode ? (\r\n          <></>\r\n        ) : (\r\n          <>\r\n            <IconButton color='secondary' aria-label='like post' disabled>\r\n              <FavoriteBorderIcon />\r\n            </IconButton>\r\n            <IconButton color='secondary' aria-label='like post' disabled>\r\n              <CommentIcon />\r\n            </IconButton>\r\n            <GraphQLDeleteButton postId={id} />\r\n          </>\r\n        )}\r\n        <IconButton\r\n          color='secondary'\r\n          aria-label='edit post'\r\n          onClick={() => setEditMode(!editMode)}\r\n        >\r\n          <EditIcon color={editMode ? \"disabled\" : \"action\"} />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n//TODO Only return success message for update, no need to return complete Post, because it is done seperately anyway\r\nconst UPDATE_POST_MUTATION = gql`\r\n  mutation updatePost($postId: ID!, $body: String!) {\r\n    updatePost(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\nexport default GraphQLPost;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport FETCH_POSTS_QUERY from \"../util/graphql\";\r\nimport { Context } from \"../Store/GraphQL_Request_Store\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction GraphQLPostForm() {\r\n  const [, dispatch] = useContext(Context);\r\n\r\n  const classes = useStyles();\r\n  const [postBody, setPostBody] = useState();\r\n  const [inputFocused, setInputFocus] = useState();\r\n\r\n  const [createPostResult, setCreatePostResult] = useState();\r\n\r\n  const [createPost] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: { body: postBody },\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({ query: FETCH_POSTS_QUERY });\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: { getPosts: [result.data.createPost, ...data.getPosts] },\r\n      });\r\n      setCreatePostResult(() => JSON.stringify(result, null, 2));\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    createPost();\r\n    setPostBody(\"\");\r\n    //TODO reset Textfield after post was submitted\r\n    setInputFocus(false);\r\n    // setInputFocus({ postBody } === \"\" ? true : false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (createPostResult) {\r\n      dispatch({\r\n        type: \"ADD_GRAPHQL_REQUEST\",\r\n        payload: {\r\n          Request: \"Add Post\",\r\n          RequestMethod: \"POST\",\r\n          RequestURL: \"http://localhost:5000/\",\r\n          RequestBody: CREATE_POST_MUTATION.loc.source.body,\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(createPostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: createPostResult,\r\n        },\r\n      });\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [createPostResult]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={<Avatar aria-label='recipe'>S</Avatar>}\r\n        title='User Name'\r\n        subheader=''\r\n      />\r\n      <CardContent>\r\n        <form\r\n          onSubmit={(e) => {\r\n            handleSubmit(e);\r\n          }}\r\n        >\r\n          <FormControl fullWidth>\r\n            <TextField\r\n              id='outlined-multiline-static'\r\n              label='New Post'\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              variant='outlined'\r\n              name='postBody'\r\n              required\r\n              value={postBody}\r\n              autoFocus={inputFocused}\r\n              onChange={(e) => setPostBody(e.target.value)}\r\n            />\r\n            <CardActions>\r\n              <Button\r\n                type='submit'\r\n                value='SubmitPost'\r\n                variant='contained'\r\n                color='secondary'\r\n              >\r\n                Submit\r\n              </Button>\r\n            </CardActions>\r\n          </FormControl>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default GraphQLPostForm;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport { Context } from \"../Store/GraphQL_Request_Store\";\r\n\r\nfunction GraphQLRequestAccordion({ posts }) {\r\n  const [state] = useContext(Context);\r\n\r\n  return (\r\n    <>\r\n      {state.requests ? (\r\n        <>\r\n          {state.requests.map((request) => (\r\n            <Accordion key={request.Response}>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls='panel1a-content'\r\n                id='panel1a-header'\r\n              >\r\n                <h3>{request.Request}</h3>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <h4>Request</h4>\r\n\r\n                    <Card elevation={2}>\r\n                      <CardContent>\r\n                        <p>\r\n                          <b>URL: </b>\r\n                          <a href={request.RequestURL}>\r\n                            <code>{request.RequestURL}</code>\r\n                          </a>\r\n                          <br />\r\n                          <br />\r\n                          <b>Method:</b> <code>{request.RequestMethod}</code>\r\n                          <br />\r\n                          <br />\r\n                          <b>Body:</b>\r\n                        </p>\r\n                        <code>\r\n                          <pre>{request.RequestBody}</pre>\r\n                        </code>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <h4>Response</h4>\r\n                    <Card elevation={2}>\r\n                      <CardContent>\r\n                        <b>\r\n                          Size:{\" \"}\r\n                          {request.RequestSize ? (\r\n                            <code>{request.RequestSize.toFixed(2)} KB</code>\r\n                          ) : (\r\n                            <code>???</code>\r\n                          )}\r\n                        </b>\r\n                        <br />\r\n                        <b>\r\n                          Execution Time:{\" \"}\r\n                          {request.RequestExecutionTime ? (\r\n                            <code>\r\n                              {request.RequestExecutionTime.toFixed(2)} ms\r\n                            </code>\r\n                          ) : (\r\n                            <code>???</code>\r\n                          )}\r\n                        </b>\r\n                        <code>\r\n                          <pre>{request.Response}</pre>\r\n                        </code>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <h1>Nothing to see here</h1>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GraphQLRequestAccordion;\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Grid,\r\n  CircularProgress,\r\n  Grow,\r\n} from \"@material-ui/core\";\r\n\r\nimport GraphQLPost from \"./GraphQL_Post\";\r\nimport GraphQLPostForm from \"./GraphQL_PostForm\";\r\nimport FETCH_POSTS_QUERY from \"../util/graphql\";\r\nimport GraphQLRequestAccordion from \"./GraphQL_RequestAccordion\";\r\n//TODO Load Request URL from ApolloProvider\r\n// import apolloURI from \"../ApolloProvider\";\r\n\r\nimport { Context } from \"../Store/GraphQL_Request_Store\";\r\n\r\nfunction GraphQL() {\r\n  const [, dispatch] = useContext(Context);\r\n\r\n  var start = performance.now();\r\n  const {\r\n    data: { getPosts: posts } = {},\r\n  } = useQuery(FETCH_POSTS_QUERY);\r\n  var time = performance.now();\r\n  console.log(time - start);\r\n\r\n  // Workaround, to avoid getting displayed a new Request Accordion for every change on posts\r\n  const [initiallyLoaded, setInitiallyLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // gets called twice, only the second time the posts are fetched,\r\n    // check if posts are there to store request and response in global state\r\n    // console.log(apolloURI);\r\n    if (!initiallyLoaded) {\r\n      if (posts) {\r\n        setInitiallyLoaded(true);\r\n        dispatch({\r\n          type: \"ADD_GRAPHQL_REQUEST\",\r\n          payload: {\r\n            Request: \"Get Posts\",\r\n            RequestMethod: \"POST\",\r\n            RequestURL: \"http://localhost:5000/\",\r\n            RequestBody: FETCH_POSTS_QUERY.loc.source.body,\r\n            //TODO Fix calculation of Size to be exact or read it from the header\r\n            RequestSize: (JSON.stringify(posts).length * 16) / 8 / 1024 / 2,\r\n            RequestExecutionTime: time - start,\r\n            Response: JSON.stringify(posts, null, 2),\r\n          },\r\n        });\r\n      }\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [posts]);\r\n\r\n  return (\r\n    <Container maxWidth='md'>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <h1>GraphQL</h1>\r\n          {posts ? (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Paper>\r\n                  <GraphQLPostForm />\r\n                </Paper>\r\n              </Grid>\r\n              {posts.map((post) => (\r\n                <Grid key={post.id} item xs={12}>\r\n                  <Grow\r\n                    in={true}\r\n                    style={{ transformOrigin: \"0 0 0\" }}\r\n                    timeout={800}\r\n                  >\r\n                    <Paper elevation={2}>\r\n                      <GraphQLPost post={post} />\r\n                    </Paper>\r\n                  </Grow>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          ) : (\r\n            <CircularProgress />\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <h1>Requests</h1>\r\n          <GraphQLRequestAccordion posts={posts} />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GraphQL;\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n});\r\n","import http from \"../http-common\";\r\n\r\nclass httpRestService {\r\n  getAll() {\r\n    return http.get(\"/posts\");\r\n  }\r\n\r\n  // get(id) {\r\n  //   return http.get(`/post/${id}`);\r\n  // }\r\n\r\n  create(body) {\r\n    return http.post(\"/posts/newpost\", {\r\n      body: body,\r\n    });\r\n  }\r\n\r\n  update(id, body) {\r\n    return http.put(`posts/updatepost/${id}`, {\r\n      body: body,\r\n    });\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/posts/${id}`);\r\n  }\r\n}\r\nexport default new httpRestService();\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  requests: [],\r\n};\r\nconst RESTRequeststore = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"Add_REST_REQUEST\":\r\n        const newState = {\r\n          ...state,\r\n          requests: [...state.requests, action.payload],\r\n        };\r\n        return newState;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }, initialState);\r\n\r\n  return (\r\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\r\n  );\r\n};\r\n\r\nexport const Context = createContext(initialState);\r\n\r\nexport default RESTRequeststore;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { IconButton, makeStyles } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport httpRestService from \"../services/httpRest.service\";\r\nimport { Context } from \"../Store/REST_Request_Store\";\r\n\r\nfunction DeleteButton({ postId, parentCallback }) {\r\n  const useStyles = makeStyles({\r\n    DeleteButton: {\r\n      padding: \"0 0 auto 0\",\r\n      textAlign: \"right\",\r\n    },\r\n  });\r\n\r\n  const [, dispatch] = useContext(Context);\r\n  const [deletePostResult, setDeletePostResult] = useState();\r\n\r\n  const deletePost = () => {\r\n    httpRestService\r\n      .delete(`deletepost/${postId}`)\r\n      .then((res) => {\r\n        setDeletePostResult(() => JSON.stringify(res, null, 2));\r\n        parentCallback(postId);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  //TODO Store Delete Request in Context\r\n  useEffect(() => {\r\n    if (deletePostResult) {\r\n      dispatch({\r\n        type: \"Add_REST_REQUEST\",\r\n        payload: {\r\n          Request: \"Delete Post\",\r\n          RequestMethod: \"DELETE\",\r\n          RequestURL: `http://localhost:8080/api/posts/deletepost/${postId}`,\r\n          RequestBody: \"\",\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(deletePostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: deletePostResult,\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton\r\n      variant='outlined'\r\n      color='secondary'\r\n      aria-label='delete post'\r\n      className={classes.DeleteButton}\r\n      onClick={deletePost}\r\n    >\r\n      <DeleteIcon />\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  CardContent,\r\n  IconButton,\r\n  FormControl,\r\n  Button,\r\n  TextField,\r\n  Grow,\r\n  Card,\r\n  CardHeader,\r\n  CardActions,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport moment from \"moment\";\r\n\r\nimport RESTDeleteButton from \"./REST_DeleteButton\";\r\nimport httpRestService from \"../services/httpRest.service\";\r\nimport { Context } from \"../Store/REST_Request_Store\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction RESTPost({ parentCallback, restpost: { _id, body, createdAt } }) {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [postBody, setPostBody] = useState(body);\r\n\r\n  const [, dispatch] = useContext(Context);\r\n  const [updatePostResult, setUpdatePostResult] = useState();\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleSave = (e) => {\r\n    e.preventDefault();\r\n    // updatePost();\r\n    setEditMode(false);\r\n  };\r\n\r\n  const callbackFunction = (postId) => {\r\n    parentCallback(postId);\r\n  };\r\n\r\n  const updatePost = () => {\r\n    httpRestService\r\n      .update(_id, postBody)\r\n      .then((res) => {\r\n        setUpdatePostResult(JSON.stringify(res, null, 2));\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (updatePostResult) {\r\n      dispatch({\r\n        type: \"Add_REST_REQUEST\",\r\n        payload: {\r\n          Request: \"Update Post\",\r\n          RequestMethod: \"PUT\",\r\n          RequestBody: postBody,\r\n          RequestURL: `http://localhost:8080/api/posts/updatepost/${_id}`,\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(updatePostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: updatePostResult,\r\n        },\r\n      });\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [updatePostResult]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label='recipe' className={classes.avatar}>\r\n            S\r\n          </Avatar>\r\n        }\r\n        title='User Name'\r\n        subheader={moment(createdAt).fromNow()}\r\n      />\r\n      <CardContent>\r\n        {editMode ? (\r\n          <Grow in={true} style={{ transformOrigin: \"0 0 0\" }} timeout={800}>\r\n            <form\r\n              onSubmit={(e) => {\r\n                handleSave(e);\r\n              }}\r\n            >\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id='standard-basic'\r\n                  label='Edit Post'\r\n                  rows={4}\r\n                  fullWidth\r\n                  variant='outlined'\r\n                  name='postBody'\r\n                  required\r\n                  value={postBody}\r\n                  // autoFocus={inputFocused}\r\n                  onChange={(e) => setPostBody(e.target.value)}\r\n                />\r\n                <CardActions>\r\n                  <Button\r\n                    type='submit'\r\n                    value='SubmitPost'\r\n                    variant='contained'\r\n                    color='secondary'\r\n                    onClick={updatePost}\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                </CardActions>\r\n              </FormControl>\r\n            </form>\r\n          </Grow>\r\n        ) : (\r\n          <Typography variant='body2' component='p'>\r\n            {postBody}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n      <CardActions>\r\n        {editMode ? (\r\n          <></>\r\n        ) : (\r\n          <>\r\n            <IconButton color='secondary' aria-label='like post' disabled>\r\n              <FavoriteBorderIcon />\r\n            </IconButton>\r\n            <IconButton color='secondary' aria-label='like post' disabled>\r\n              <CommentIcon />\r\n            </IconButton>\r\n            <RESTDeleteButton parentCallback={callbackFunction} postId={_id} />\r\n          </>\r\n        )}\r\n        <IconButton\r\n          color='secondary'\r\n          aria-label='edit post'\r\n          onClick={() => setEditMode(!editMode)}\r\n        >\r\n          <EditIcon color={editMode ? \"disabled\" : \"action\"} />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\nexport default RESTPost;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nimport httpRestService from \"../services/httpRest.service\";\r\nimport { Context } from \"../Store/REST_Request_Store\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction RESTPostForm({ parentCallback }) {\r\n  const [, dispatch] = useContext(Context);\r\n\r\n  const classes = useStyles();\r\n  const [postBody, setPostBody] = useState();\r\n  const [inputFocused, setInputFocus] = useState();\r\n\r\n  const [createPostResult, setCreatePostResult] = useState(\"\");\r\n\r\n  const createPost = () => {\r\n    httpRestService\r\n      .create(postBody)\r\n      .then((res) => {\r\n        parentCallback(res);\r\n        setCreatePostResult(() => JSON.stringify(res, null, 2));\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (createPostResult) {\r\n      dispatch({\r\n        type: \"Add_REST_REQUEST\",\r\n        payload: {\r\n          Request: \"Add Post\",\r\n          RequestMethod: \"POST\",\r\n          RequestURL: \"http://localhost:8080/api/posts/newpost\",\r\n          RequestBody: postBody,\r\n          //TODO Fix calculation of Size to be exact or read it from the header\r\n          RequestSize:\r\n            (JSON.stringify(createPostResult).length * 16) / 8 / 1024 / 2,\r\n          Response: createPostResult,\r\n        },\r\n      });\r\n      setCreatePostResult(\"\");\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [createPostResult]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    createPost();\r\n    setPostBody(\"\");\r\n    //TODO reset Textfield after post was submitted\r\n    // console.log(postBody);\r\n    setInputFocus(false);\r\n    // setInputFocus({ postBody } === \"\" ? true : false);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={<Avatar aria-label='recipe'>S</Avatar>}\r\n        title='User Name'\r\n        subheader=''\r\n      />\r\n      <CardContent>\r\n        <form\r\n          onSubmit={(e) => {\r\n            handleSubmit(e);\r\n          }}\r\n        >\r\n          <FormControl fullWidth>\r\n            <TextField\r\n              id='outlined-multiline-static'\r\n              label='New Post'\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              variant='outlined'\r\n              name='postBody'\r\n              required\r\n              value={postBody}\r\n              autoFocus={inputFocused}\r\n              onChange={(e) => setPostBody(e.target.value)}\r\n            />\r\n            <CardActions>\r\n              <Button\r\n                type='submit'\r\n                value='SubmitPost'\r\n                variant='contained'\r\n                color='secondary'\r\n              >\r\n                Submit\r\n              </Button>\r\n            </CardActions>\r\n          </FormControl>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RESTPostForm;\r\n","import {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"../Store/REST_Request_Store\";\r\n\r\nfunction RESTRequestAccordion() {\r\n  const [state] = useContext(Context);\r\n\r\n  return (\r\n    <>\r\n      {state.requests ? (\r\n        <>\r\n          {state.requests.map((request) => (\r\n            <Accordion key={request.Response}>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls='panel1a-content'\r\n                id='panel1a-header'\r\n              >\r\n                <h3>{request.Request}</h3>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <h4>Request</h4>\r\n\r\n                    <Card elevation={2}>\r\n                      <CardContent>\r\n                        <p>\r\n                          <b>URL: </b>\r\n                          <a href={request.RequestURL}>\r\n                            <code>{request.RequestURL}</code>\r\n                          </a>\r\n                          <br />\r\n                          <br />\r\n                          <b>Method:</b> <code>{request.RequestMethod}</code>\r\n                          <br />\r\n                          <br />\r\n                          <b>Body:</b>\r\n                        </p>\r\n                        <code>\r\n                          <pre>{request.RequestBody}</pre>\r\n                        </code>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <h4>Response</h4>\r\n                    <Card elevation={2}>\r\n                      <CardContent>\r\n                        <b>\r\n                          Size:{\" \"}\r\n                          {request.RequestSize ? (\r\n                            <code>{request.RequestSize.toFixed(2)} KB</code>\r\n                          ) : (\r\n                            <code>???</code>\r\n                          )}\r\n                        </b>\r\n                        <br></br>\r\n                        <b>\r\n                          Execution Time:{\" \"}\r\n                          {request.RequestExecutionTime ? (\r\n                            <code>\r\n                              {request.RequestExecutionTime.toFixed(2)} ms\r\n                            </code>\r\n                          ) : (\r\n                            <code>???</code>\r\n                          )}\r\n                        </b>\r\n\r\n                        {/* <code>{request.headers.contentlength}</code> */}\r\n                        <code>\r\n                          <pre>{request.Response}</pre>\r\n                        </code>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <h1>Nothing to see here</h1>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RESTRequestAccordion;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Grid,\r\n  Grow,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport httpRestService from \"../services/httpRest.service\";\r\nimport RESTPost from \"./REST_Post\";\r\nimport RESTPostForm from \"./REST_PostForm\";\r\nimport RESTRequestAccordion from \"./REST_RequestAccordion\";\r\nimport { Context } from \"../Store/REST_Request_Store\";\r\n\r\nfunction REST() {\r\n  const [restposts, setPosts] = useState([]);\r\n\r\n  const [, dispatch] = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    retrievePosts();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const retrievePosts = () => {\r\n    var start = performance.now();\r\n\r\n    httpRestService\r\n      .getAll()\r\n      .then((res) => {\r\n        var time = performance.now();\r\n        setPosts(res.data);\r\n        dispatch({\r\n          type: \"Add_REST_REQUEST\",\r\n          payload: {\r\n            Request: \"Get Posts\",\r\n            RequestMethod: \"GET\",\r\n            RequestURL: \"http://localhost:8080/api/posts\",\r\n            RequestBody: \"\",\r\n            //TODO Fix calculation of Size to be exact or read it from the header\r\n            RequestSize: (JSON.stringify(res).length * 16) / 8 / 1024 / 2,\r\n            RequestExecutionTime: time - start,\r\n            Response: JSON.stringify(res, null, 2),\r\n          },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const createcallbackFunction = (RESTPostNew) => {\r\n    setPosts([RESTPostNew.data, ...restposts]);\r\n  };\r\n\r\n  const deleteCallbackFunction = (postId) => {\r\n    setPosts([...restposts.filter((p) => p._id !== postId)]);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth='md'>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <h1>REST</h1>\r\n          {restposts ? (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Paper>\r\n                  <RESTPostForm parentCallback={createcallbackFunction} />\r\n                </Paper>\r\n              </Grid>\r\n              {restposts.map((restpost) => (\r\n                //TODO set unique key for rest and graphql post\r\n                <Grid key={restpost.createdAt} item xs={12}>\r\n                  <Grow\r\n                    in={true}\r\n                    style={{ transformOrigin: \"0 0 0\" }}\r\n                    timeout={800}\r\n                  >\r\n                    <Paper elevation={2}>\r\n                      <RESTPost\r\n                        parentCallback={deleteCallbackFunction}\r\n                        restpost={restpost}\r\n                      />\r\n                    </Paper>\r\n                  </Grow>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          ) : (\r\n            <CircularProgress />\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <h1>Requests</h1>\r\n          <RESTRequestAccordion />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default REST;\r\n","import \"./App.css\";\r\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\r\nimport GraphQLRequeststore from \"./Store/GraphQL_Request_Store\";\r\n\r\nimport Header from \"./components/Header\";\r\nimport GraphQL from \"./components/GraphQL_Page\";\r\nimport REST from \"./components/REST_Page\";\r\nimport RESTRequeststore from \"./Store/REST_Request_Store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header history />\r\n        <RESTRequeststore>\r\n          <Route exact path='/rest' component={REST} />\r\n        </RESTRequeststore>\r\n        <GraphQLRequeststore>\r\n          <Route exact path='/graphql' component={GraphQL} />\r\n          <Route exact path='/'>\r\n            <Redirect to='/rest' />\r\n          </Route>\r\n        </GraphQLRequeststore>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport App from \"./App\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\n\r\nexport const apolloURI = \"http://localhost:5000/\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: apolloURI,\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport ApolloProvider from \"./ApolloProvider\";\r\n\r\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}